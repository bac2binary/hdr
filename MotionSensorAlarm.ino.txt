

int speakerOut = 9;//Piezo buzzer's positive terminal is connected to digital pin 9 
 
byte names[] = {'c', 'd', 'e', 'f', 'g', 'a', 'b', 'C'};  

int tones[] = {1915, 1700, 1519, 1432, 1275, 1136, 1014, 956};

byte melody[] = "2d2a1f2c2d2a2d2c2f2d2a2c2d2a1f2c2d2a2a2g2p8p8p8p";

// count length: 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0
//                                10                  20                  30

int count = 0;

int count2 = 0;

int count3 = 0;

int MAX_COUNT = 24;

int statePin = LOW;

void siren();


 volatile byte intruder;

 void setup()

 {

   Serial.begin(115200);

   attachInterrupt(0, intruder_detect, RISING);//Initialize the intterrupt pin for the motion sensor (Arduino digital pin 2)
   
intruder = 0;

 }

 void loop()

 {

   

 }

 void intruder_detect()//This function is called whenever an intruder is detected by the arduino

 {

intruder++;
   
Serial.println("Intruder detected");
   
for(int i=0; i<3; i++)//Play the alarm three times
   siren();
 
}
 
void siren()//This function will make the alarm sound using the piezo buzzer

{

for (count = 0; count < MAX_COUNT; count++) {
      
for (count3 = 0; count3 <= (melody[count*2] - 48) * 30; count3++) {
      
for (count2=0;count2<8;count2++) {
        
if (names[count2] == melody[count*2 + 1]) {       
          
analogWrite(speakerOut,1023);
          
delayMicroseconds(tones[count2]);
          
analogWrite(speakerOut, 0);
          
delayMicroseconds(tones[count2]);
        
} 
        
if (melody[count*2 + 1] == 'p') {
          
// make a pause of a certain size
          
analogWrite(speakerOut, 0);
          
delayMicroseconds(100);
        
}
      
}
    
}
  
}

}








const int trigPin = 4;
const int echoPin = 7;

void setup() {
  // initialize serial communication:
  Serial.begin(9600);
}

void loop()
{
  // establish variables for duration of the ping, 
  // and the distance result in inches and centimeters:
  long duration, inches, cm;

  // The sensor is triggered by a HIGH pulse of 10 or more microseconds.
  // Give a short LOW pulse beforehand to ensure a clean HIGH pulse:
  pinMode(trigPin, OUTPUT);
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  // Read the signal from the sensor: a HIGH pulse whose
  // duration is the time (in microseconds) from the sending
  // of the ping to the reception of its echo off of an object.
  pinMode(echoPin, INPUT);
  duration = pulseIn(echoPin, HIGH);

  // convert the time into a distance
  inches = microsecondsToInches(duration);
  cm = microsecondsToCentimeters(duration);
  
  Serial.print(inches);
  Serial.print("in, ");
  Serial.print(cm);
  Serial.print("cm");
  Serial.println();
delay(100);
}



long microsecondsToCentimeters(long microseconds)
{
  // The speed of sound is 340 m/s or 29 microseconds per centimeter.
  // The ping travels out and back, so to find the distance of the
  // object we take half of the distance travelled.
  return microseconds / 29 / 2;
}